import concurrent.futures
import logging
import os
from typing import List

import r2pipe


class Preprocess:
    def __init__(self, config):
        """Initialize Preprocess with configuration settings."""
        self.config = config

    def _disassemble_a_binary(self, file_name: str):
        """Disassemble a single binary file."""
        try:
            disassemble = Disassemble(self.config, file_name)
            disassemble.run()
        except Exception as e:
            logging.error(f"Error disassembling {file_name}: {e}")

    def run(self, file_list: List[str]):
        """Use concurrent.futures to process multiple files in parallel."""
        with concurrent.futures.ProcessPoolExecutor() as executor:
            executor.map(self._disassemble_a_binary, file_list)


class Disassemble:
    def __init__(self, config, file_name: str):
        """Initialize Disassemble class with the given config and file name."""
        self.config = config
        self.name = file_name
        self.input_file_path = os.path.join(self.config.folder.dataset, file_name)
        self.output_dot_path = os.path.join(
            self.config.folder.disassemble, f"{file_name}.dot"
        )

    def _check_skip_disassembly(self) -> bool:
        """Check if the output file already exists. If so, skip disassembly."""
        if os.path.exists(self.output_dot_path):
            logging.info(
                f"Output file {self.output_dot_path} already exists. Skipping disassembly."
            )
            return True
        return False

    def _open_file(self):
        """Open the binary file using r2pipe."""
        return r2pipe.open(self.input_file_path)

    def _disassemble_file(self, r2) -> str:
        """Perform disassembly and return the Function Call Graph (FCG) in .dot format."""
        r2.cmd("aaaa")  # Perform full analysis
        return r2.cmd("agCd")  # Extract function call graph (FCG)

    def _save_file(self, dot_content: str):
        """Save the disassembled function call graph (FCG) as a .dot file."""
        with open(self.output_dot_path, "w", encoding="utf-8") as f:
            f.write(dot_content)

    def run(self):
        """Execute the disassembly process."""
        if self._check_skip_disassembly():
            return

        try:
            r2 = self._open_file()
            logging.info(f"Disassembling {self.name}...")

            dot_content = self._disassemble_file(r2)
            self._save_file(dot_content)

            logging.info(f"Disassembling {self.name} is done.")
        except Exception as e:
            logging.error(f"An exception occurred while disassembling {self.name}: {e}")
        finally:
            r2.quit()
